# Automatically build multi-architectural tagged container images and push them to DockerHub
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds
#
# - targeted platforms: x86_64, PowerPC64, ARM64
# - master is built as fnndsc/pl-lld_inference:latest
# - tagged commits are built as fnndsc/pl-lld_inference:<tag>
# - tagged commits are also uploaded to chrisstore.co
#
# In order to use this workflow, see
# https://github.com/FNNDSC/cookiecutter-chrisapp/wiki/Automatic-Builds#steps-to-enable

name: ci

on:
  push:
    # we have to guess what the name of the default branch is
    branches: [ master, main, trunk ]
    tags: [ '**' ]
  pull_request:
    branches: [ master, main, trunk ]

jobs:
  test:
    if: false
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: docker build -t "${GITHUB_REPOSITORY,,}" .
      - name: nose tests
        run: docker run "${GITHUB_REPOSITORY,,}" nosetests

  publish:
    if: github.event_name == 'push' || github.event_name == 'release'
    runs-on: ubuntu-22.04

    # we want to both push the build to DockerHub, but also
    # keep a local copy so that we can run
    #
    #     docker run fnndsc/pl-app app --json > App.json
    #
    # buildx currently does not support multiple output locations,
    # neither can multi-architectural builds be loaded into docker.
    # Here we use a local registry to cache the build.
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Get git tag
        id: git_info
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Get project info
        id: determine
        env:
          git_tag: ${{ steps.git_info.outputs.tag }}
        run: |
          repo="${GITHUB_REPOSITORY,,}"  # to lower case
          # if build triggered by tag, use tag name
          tag="${git_tag:-latest}"
          dock_image=$repo:$tag
          echo $dock_image
          echo "dock_image=$dock_image" >> $GITHUB_OUTPUT
          echo "repo=$repo" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        # QEMU is used for non-x86_64 builds
      - uses: docker/setup-qemu-action@v2
        # buildx adds additional features to docker build
      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
        # cache slightly improves rebuild time
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        id: dockerhub_login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          tags: |
            localhost:5000/${{ steps.determine.outputs.dock_image }}
            docker.io/${{ steps.determine.outputs.dock_image }}
            ghcr.io/${{ steps.determine.outputs.dock_image }}
          platforms: linux/amd64
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Get plugin meta
        id: pluginmeta
        run: |
          repo=${{ steps.determine.outputs.repo }}
          dock_image=${{ steps.determine.outputs.dock_image }}
          docker pull localhost:5000/$dock_image
          docker tag localhost:5000/$dock_image $dock_image
          script=$(docker inspect --format '{{ (index .Config.Cmd 0) }}' $dock_image)
          docker run --rm $dock_image $script --json > /tmp/description.json

          jq < /tmp/description.json  # pretty print in log
          echo "title=$(jq -r '.title' < /tmp/description.json)" >> $GITHUB_OUTPUT

      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true  # it is not crucial that this works
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ steps.pluginmeta.outputs.title }}
          readme-filepath: ./README.rst
          repository: ${{ steps.determine.outputs.repo }}

      - name: Upload to ChRIS Store
        if: steps.git_info.outcome != 'skipped'
        uses: FNNDSC/chrisstore-action@master
        with:
          descriptor_file: /tmp/description.json
          auth: ${{ secrets.CHRIS_STORE_USER }}
          chris_admin_auth: ${{ secrets.CUBE_CHRISPROJECT_ORG_ADMIN_USER }}
          chris_admin_url: https://cube.chrisproject.org/chris-admin/api/v1/
          compute_resources: galena-avx
